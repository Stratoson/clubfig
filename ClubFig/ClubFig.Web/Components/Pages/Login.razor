@page "/login"
@using ClubFig.Web.Services
@using Clubfig.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@rendermode InteractiveServer

<PageTitle>Login - Clubfig</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h2>Welcome to @TenantName</h2>
        <p class="text-muted">Sign in to your account</p>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="() => loginModel.Email" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="() => loginModel.Password" />
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Sign In
                </button>
            </div>
        </EditForm>

        <div class="text-center">
            <a href="/forgot-password">Forgot password?</a>
        </div>
    </div>
</div>

@code {
    // Mutable model class for form binding
    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }

    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    [Inject]
    private TenantContext? TenantContext { get; set; }

    [Inject]
    private HttpClient? HttpClient { get; set; }

    private string? errorMessage;
    private bool isLoading;
    private string TenantName => TenantContext?.OrganizationName ?? "Clubfig";

    protected override void OnInitialized()
    {
        if (TenantContext?.TenantId == null)
        {
            errorMessage = "Unable to identify organization. Please check your URL.";
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;
        isLoading = true;

        try
        {
            // Convert to LoginRequest DTO
            var loginRequest = new LoginRequest(loginModel.Email, loginModel.Password);

            var response = await HttpClient!.PostAsJsonAsync("/api/auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                Logger.LogInformation("User logged in successfully: {Email}", loginModel.Email);
                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = "Invalid email or password. Please try again.";
                Logger.LogWarning("Login failed for: {Email}", loginModel.Email);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again later.";
            Logger.LogError(ex, "Login error for: {Email}", loginModel.Email);
        }
        finally
        {
            isLoading = false;
        }
    }
}