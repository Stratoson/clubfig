@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

@if (isAuthorized)
{
    @ChildContent
}
else if (isLoading)
{
    <div class="loading-container">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public List<string>? RequiredRoles { get; set; }

    private bool isAuthorized = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            if (RequiredRoles == null || RequiredRoles.Count == 0)
            {
                isAuthorized = true;
            }
            else
            {
                isAuthorized = RequiredRoles.Any(role => user.IsInRole(role));
            }
        }

        if (!isAuthorized && user.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
        }

        isLoading = false;
    }
}